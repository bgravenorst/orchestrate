version: 2.1

orbs:
  go: circleci/go@1.5.0

commands:
  prepare_golang:
    description: "Checkout, install all packages and handle cache"
    steps:
      - checkout
      - go/mod-download-cached
  prepare_docker:
    description: "Docker login"
    steps:
      - run:
          name: Docker login
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin $DOCKER_REGISTRY
            echo $DOCKER_PASS_2 | docker login -u $DOCKER_USER_2 --password-stdin $DOCKER_REGISTRY_2

  # potential remote environment values
  # - qa
  # - staging
  # potential remote namespace: 
  # - staging-v21-1 (CIRCLE_TAG=v21.1.4)
  # - qa (CIRCLE_BRANCH=main)
  # - qa-v21-1 (CIRCLE_BRANCH=maintenance/v21.1)
  set_remote_environment_variables:
    description: "Set remote environment values"
    parameters:
      environment_values:
        type: string
        default: ""
      orchestrate_namespace:
        type: string
        default: ""
    steps:
      - when:
          condition: <<parameters.environment_values>>
          steps:
            - run:
                name: Set Environment Values
                command: echo 'export ENVIRONMENT_VALUES=<<parameters.environment_values>>' >> $BASH_ENV
      - unless:
          condition: <<parameters.environment_values>>
          steps:
            - run:
                name: Set Environment Values
                command: if [ "${CIRCLE_TAG}" ]; then echo 'export ENVIRONMENT_VALUES=staging' >> $BASH_ENV ; else echo 'export ENVIRONMENT_VALUES=qa' >> $BASH_ENV; fi
      - when:
          condition: <<parameters.orchestrate_namespace>>
          steps:
            - run:
                name: Set Orchestrate Namespace
                command: echo 'export ORCHESTRATE_NAMESPACE=<<parameters.environment_values>>' >> $BASH_ENV

      - unless:
          condition: <<parameters.orchestrate_namespace>>
          steps:
            - run:
                name: Set Orchestrate Namespace
                command: |
                  if [ "${CIRCLE_TAG}" ]; then echo 'export TAG=${CIRCLE_TAG%.*}' >> $BASH_ENV && echo 'export ORCHESTRATE_NAMESPACE=${ENVIRONMENT_VALUES}-${TAG//./-}' >> $BASH_ENV;
                  elif [ "${CIRCLE_BRANCH}" == "main" ]; then echo 'export ORCHESTRATE_NAMESPACE=${ENVIRONMENT_VALUES}' >> $BASH_ENV; 
                  else echo 'export TAG=${CIRCLE_BRANCH#"maintenance/"}' >> $BASH_ENV && echo 'export ORCHESTRATE_NAMESPACE=${ENVIRONMENT_VALUES}-${TAG//./-}' >> $BASH_ENV;
                  fi

  prepare_e2e:
    description: "Orchestrate e2e environment"
    parameters:
      environment_values:
        type: string
        default: ""
      orchestrate_namespace:
        type: string
        default: ""
    steps:
      - run:
          name: Build test binary
          command: make gobuild-e2e
      - set_remote_environment_variables:
          environment_values: <<parameters.environment_values>>
          orchestrate_namespace: <<parameters.orchestrate_namespace>>
      - run:
          name: Setup QA environment variables
          command: |
            echo 'export API_URL=https://${ORCHESTRATE_NAMESPACE}.orchestrate.${REMOTE_DOMAIN_NAME}' >> $BASH_ENV
            echo 'export KAFKA_URL=kafka-${ENVIRONMENT_VALUES}-0.kafka.${REMOTE_DOMAIN_NAME}:9094' >> $BASH_ENV
            echo 'export KAFKA_SASL_ENABLED=true' >> $BASH_ENV
            echo 'export KAFKA_SASL_MECHANISM=PLAIN' >> $BASH_ENV
            echo 'export KAFKA_SASL_USER=${QA_KAFKA_SASL_USER}' >> $BASH_ENV
            echo 'export KAFKA_SASL_PASSWORD=${QA_KAFKA_SASL_PASSWORD}' >> $BASH_ENV
            echo 'export KEY_MANAGER_URL=${QA_QUORUM_KEY_MANAGER_URL}' >> $BASH_ENV
            echo 'export KEY_MANAGER_STORE_NAME=${QA_KEY_MANAGER_STORE_NAME}' >> $BASH_ENV
            echo 'export TOPIC_TX_SENDER=${ORCHESTRATE_NAMESPACE}-tx-sender' >> $BASH_ENV
            echo 'export TOPIC_TX_RECOVER=${ORCHESTRATE_NAMESPACE}-tx-recover' >> $BASH_ENV
            echo 'export TOPIC_TX_DECODED=${ORCHESTRATE_NAMESPACE}-tx-decoded' >> $BASH_ENV
            echo 'export MULTI_TENANCY_ENABLED=true' >> $BASH_ENV
            echo 'export AUTH_API_KEY=${QA_AUTH_API_KEY}' >> $BASH_ENV
            echo 'export AUTH_JWT_ISSUER_URL=${QA_AUTH_JWT_ISSUER_URL}' >> $BASH_ENV
            echo 'export TEST_GLOBAL_DATA=${QA_TEST_GLOBAL_DATA}' >> $BASH_ENV

  docker_build_e2e_dev:
    description: "Build Orchestrate E2E"
    steps:
      - run:
          name: Build Orchestrate E2E
          command: >-
            DOCKER_BUILDKIT=1 docker build
            --label org.opencontainers.image.created=`date -u +"%Y-%m-%dT%H:%M:%SZ"`
            --label org.opencontainers.image.url="https://consensys.net/codefi/orchestrate/"
            --label org.opencontainers.image.source="${CIRCLE_REPOSITORY_URL}"
            --label org.opencontainers.image.version="branch"
            --label org.opencontainers.image.revision="${CIRCLE_SHA1:0:7}"
            --label org.opencontainers.image.vendor="ConsenSys Software Inc."
            --label org.opencontainers.image.title="${CIRCLE_PROJECT_REPONAME}-e2e"
            --label org.opencontainers.image.description="Orchestrate is a blockchain Transaction Orchestration system"
            --label org.opencontainers.image.documentation="https://docs.orchestrate.consensys.net/"
            --label org.opencontainers.image.licenses="BUSL-1.1"
            -f ./Dockerfile.e2e
            -q
            --build-arg VERSION=debug
            -t orchestrate-e2e:${CIRCLE_SHA1:0:7} .

  docker_build_image:
    description: "Build Orchestrate"
    steps:
      - run:
          name: Build Orchestrate
          command: >-
            DOCKER_BUILDKIT=1 docker build
            --label org.opencontainers.image.created=`date -u +"%Y-%m-%dT%H:%M:%SZ"`
            --label org.opencontainers.image.url="https://consensys.net/codefi/orchestrate/"
            --label org.opencontainers.image.source="${CIRCLE_REPOSITORY_URL}"
            --label org.opencontainers.image.version="branch"
            --label org.opencontainers.image.revision="${CIRCLE_SHA1:0:7}"
            --label org.opencontainers.image.vendor="ConsenSys Software Inc."
            --label org.opencontainers.image.title="${CIRCLE_PROJECT_REPONAME}"
            --label org.opencontainers.image.description="Orchestrate is a blockchain Transaction Orchestration system"
            --label org.opencontainers.image.documentation="https://docs.orchestrate.consensys.net/"
            --label org.opencontainers.image.licenses="BUSL-1.1"
            -q
            -t orchestrate:${CIRCLE_SHA1:0:7} .

jobs:
  lint:
    executor:
      name: go/default
      tag: '1.16.8'
    resource_class: xlarge
    steps:
      - prepare_golang
      - run:
          name: Check lints
          command: |
            make lint-tools
            make lint-ci

  gobuild:
    executor:
      name: go/default
      tag: '1.16.8'
    steps:
      - prepare_golang
      - run:
          name: Build
          command: make gobuild

  test:
    docker:
      - image: cimg/go:1.16.8
      - image: postgres:13.4-alpine
        environment:
          POSTGRES_PASSWORD: "postgres"
          DB_HOST: "postgres"
    resource_class: xlarge
    steps:
      - prepare_golang
      - run:
          name: Run unit tests
          command: make run-coverage

  race:
    docker:
      - image: cimg/go:1.16.8
    resource_class: xlarge
    steps:
      - prepare_golang
      - run:
          name: Run unit tests (race)
          command: make race

  integration:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: xlarge
    steps:
      - run:
          name: Uninstall Go
          command: sudo rm -rvf /usr/local/go/
      - go/install:
          version: 1.16.8
      - prepare_golang
      - run:
          name: Integration tests
          command: make run-integration

  push-orchestrate-image:
    docker:
      - image: cimg/base:2020.01
    resource_class: large
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - prepare_docker
      - docker_build_image
      - run:
          name: Deploy image in dev repository
          command: |
            docker tag orchestrate:${CIRCLE_SHA1:0:7} ${DOCKER_REGISTRY_DEV_REPO}/orchestrate:${CIRCLE_SHA1:0:7}
            docker push ${DOCKER_REGISTRY_DEV_REPO}/orchestrate:${CIRCLE_SHA1:0:7}
            
            docker tag orchestrate:${CIRCLE_SHA1:0:7} ${DOCKER_REGISTRY_DEV_REPO}/orchestrate:develop
            docker push ${DOCKER_REGISTRY_DEV_REPO}/orchestrate:develop

#  push-orchestrate-e2e-image:
#    docker:
#      - image: cimg/base:2020.01
#    resource_class: large
#    steps:
#      - checkout
#      - setup_remote_docker:
#          version: 19.03.13
#          docker_layer_caching: true
#      - prepare_docker
#      - docker_build_e2e_dev
#      - run:
#          name: Deploy e2e image in dev repository
#          command: |
#            docker tag orchestrate-e2e:${CIRCLE_SHA1:0:7} ${DOCKER_REGISTRY_REPO_2}/orchestrate-e2e:${CIRCLE_SHA1:0:7}
#            docker push ${DOCKER_REGISTRY_DEV_REPO}/orchestrate-e2e:${CIRCLE_SHA1:0:7}

  deploy-qa:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - set_remote_environment_variables
      - run:
          name: Deploy QA environment
          command: >-
            ORCHESTRATE_TAG=${CIRCLE_SHA1:0:7}
            ORCHESTRATE_REPOSITORY=${DOCKER_REGISTRY_DEV_REPO}/orchestrate
            make deploy-remote-env

  run-e2e-local:
    machine:
      image: ubuntu-2004:202010-01
      docker_layer_caching: true    
    resource_class: xlarge
    steps:
      - run:
          name: Uninstall Go
          command: sudo rm -rvf /usr/local/go/
      - go/install:
          version: 1.16.8
      - prepare_golang
      - run:
          name: e2e local tests
          command: |
            set -eo
            cp .env.multitenancy .env
            make up
            echo "Wait 20 seconds for services to boot up correctly..."
            sleep 20
            make e2e-ci
            exitCode=$(docker inspect project_e2e_1 --format='{{.State.ExitCode}}')
            echo "Code: $exitCode"
            exit $exitCode
      - store_artifacts:
          path: ./build/report/report.html
          destination: report.html

  run-e2e:
    docker:
      - image: cimg/go:1.16.8-node
    resource_class: large
    steps:
      - prepare_golang
      - prepare_e2e
      - run:
          name: Running e2e
          environment:
            CUCUMBER_OUTPUTPATH: "./scripts/report/report.json"
            CUCUMBER_OUTPUT: "./report.html"
            CUCUMBER_INPUT: "./report.json"
            CUCUMBER_PATHS: "./tests/features"
            ARTIFACTS_PATH: "./tests/artifacts"
            CUCUMBER_FORMAT: "cucumber"
            CUCUMBER_STEPS_TIMEOUT: "1m"
            CUCUMBER_CONCURRENCY: "5"
            KAFKA_CONSUMER_GROUP_NAME: "e2e"
            LOG_LEVEL: "INFO"
          command: |
            set +e
            CIRCLE_TAG=${CIRCLE_TAG}
            CIRCLE_BRANCH=${CIRCLE_BRANCH}
            CIRCLE_SHA1=${CIRCLE_SHA1}
            CIRCLE_BUILD_IMAGE=${CIRCLE_BUILD_IMAGE}
            CIRCLE_BUILD_URL=${CIRCLE_BUILD_URL}
            CIRCLE_BUILD_NUM=${CIRCLE_BUILD_NUM}
            ./build/bin/test e2e
            exitCode=$(echo $?)
            cd ./scripts/report
            npm install
            npm start
            exit $exitCode
      - store_artifacts:
          path: ./scripts/report/report.html
          destination: report.html

  run-stress:
    docker:
      - image: cimg/go:1.16.8
    resource_class: large
    parameters:
      environment_values:
        type: string
        default: ""
      orchestrate_namespace:
        type: string
        default: ""
      stress_concurrency:
        type: string
        default: "5"
      stress_iteration:
        type: string
        default: "100"
      stress_timeout:
        type: string
        default: "10m"
    steps:
      - prepare_golang
      - prepare_e2e:
          environment_values: <<parameters.environment_values>>
          orchestrate_namespace: <<parameters.orchestrate_namespace>>
      - run:
          name: Running stress
          environment:
            ARTIFACTS_PATH: "./tests/artifacts"
            STRESS_CONCURRENCY: <<parameters.stress_concurrency>>
            STRESS_ITERATIONS: <<parameters.stress_iteration>>
            STRESS_TIMEOUT: <<parameters.stress_timeout>>
            KAFKA_CONSUMER_GROUP_NAME: "stress"
          command: ./build/bin/test stress

  release-tag:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - prepare_docker
      - docker_build_image
      - run:
          name: Release latest
          command: |
            docker tag orchestrate:${CIRCLE_SHA1:0:7} ${DOCKER_REGISTRY_REPO_2}/orchestrate:${CIRCLE_TAG}
            docker push ${DOCKER_REGISTRY_REPO_2}/orchestrate:${CIRCLE_TAG}

            docker tag orchestrate:${CIRCLE_SHA1:0:7} ${DOCKER_REGISTRY_REPO_2}/orchestrate:latest
            docker push ${DOCKER_REGISTRY_REPO_2}/orchestrate:latest

  deploy-staging:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - set_remote_environment_variables
      - run:
          name: Deploy staging environment
          command: >-
            ORCHESTRATE_TAG=${CIRCLE_TAG}
            ORCHESTRATE_REPOSITORY=${DOCKER_REGISTRY_REPO}/orchestrate
            make deploy-remote-env

workflows:
  version: 2
  default:
    jobs:
#      - lint:
#          filters:
#            tags:
#              only: /^v.*/
#            branches:
#              only: /.*/
#      - gobuild:
#          filters:
#            tags:
#              only: /^v.*/
#            branches:
#              only: /.*/
#      - test:
#          filters:
#            tags:
#              only: /^v.*/
#            branches:
#              only: /.*/
#      - race:
#          filters:
#            tags:
#              only: /^v.*/
#            branches:
#              only: /.*/
#      - integration:
#          filters:
#            tags:
#              only: /^v.*/
#            branches:
#              only: /.*/
      - run-e2e-local:
            filters:
              branches:
#                only: main
                only: 758-pipeline_e2e
              tags:
                only: /^v.*/
#            requires:
#              - lint
#              - gobuild
#              - test
#              - race
#              - integration
#      - push-orchestrate-image:
#          filters:
#            branches:
#              only: main
#          requires:
#            - run-e2e-local
#      - wait-for-approval:
#          type: approval
#          filters:
#            tags:
#              only: /^v.*/
#            branches:
#              ignore: /.*/
#          requires:
#            - run-e2e-local
#      - release-tag:
#          filters:
#            tags:
#              only: /^v.*/
#            branches:
#              ignore: /.*/
#          requires:
#            - wait-for-approval
#      - push-orchestrate-e2e-image:
#          filters:
#            branches:
#              ignore: /.*/
#            tags:
#              only: /^v.*/
#          requires:
#            - lint
#            - gobuild
#            - test
#            - race
#            - integration
#      - deploy-qa:
#          filters:
#            branches:
#              only: main
#          requires:
#            - push-orchestrate-image
#      - run-e2e:
#          filters:
#            branches:
#              only: main
#          requires:
#            - deploy-qa
#      - run-stress:
#          filters:
#            branches:
#              only: main
#          requires:
#            - run-e2e
#            - deploy-qa
#      - deploy-staging:
#          filters:
#            tags:
#              only: /^v.*/
#            branches:
#              ignore: /.*/
#          requires:
#            - release-tag
  # schedule-stress:
  #   triggers:
  #     - schedule:
  #         cron: "3 * * * *"
  #         filters:
  #           branches:
  #             only:
  #               - main
  #   jobs:
  #     - run-stress:
  #         environment_values: "staging"
  #         stress_concurrency: "3"
  #         stress_iteration: "200"
  #         stress_timeout: "30m"
